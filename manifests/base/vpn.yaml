apiVersion: v1
kind: ConfigMap
metadata:
  name: vpn-configmap
data:     
  step1.sh: |-
    #!/bin/bash
    echo ***setting up CA files***
    rm -rf /data/BBS/output/private/vpn
    mkdir -p /data/BBS/output/private/vpn/CA
    chown developer.developer /data/BBS/output/private/vpn -R
    cd /data/BBS/output/private/vpn/CA
    wget -P ./ https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.8/EasyRSA-3.0.8.tgz
    tar xvf EasyRSA-3.0.8.tgz
    ls -la
    cp /opt/vpn/vars ./EasyRSA-3.0.8
    cd EasyRSA-3.0.8
    echo init pki
    ./easyrsa init-pki
    echo build-ca
    ./easyrsa build-ca nopass < /etc/hostname

  step2.sh: |-
    #!/bin/bash
    echo ***setting up server files***
    mkdir -p /data/BBS/output/private/vpn/CA/tmp
    mkdir -p /data/BBS/output/private/vpn/SERVER/tmp
    mkdir -p /data/BBS/output/private/vpn/OPENVPN/keys
    cd /data/BBS/output/private/vpn/SERVER
    wget -P ./ https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.8/EasyRSA-3.0.8.tgz
    tar xvf EasyRSA-3.0.8.tgz
    ls -la
    cp /opt/vpn/vars ./EasyRSA-3.0.8
    cd EasyRSA-3.0.8
    echo init pki
    ./easyrsa init-pki
    echo  gen-req 
    ./easyrsa gen-req server nopass < /etc/hostname
    cp pki/private/server.key /data/BBS/output/private/vpn/OPENVPN/keys
    cp pki/reqs/server.req /data/BBS/output/private/vpn/CA/tmp  
    cd /data/BBS/output/private/vpn/CA/EasyRSA-3.0.8
    echo import-req
    ./easyrsa import-req /data/BBS/output/private/vpn/CA/tmp/server.req server
    echo sign-reg
    echo yes | ./easyrsa sign-req server server
    cp pki/issued/server.crt /data/BBS/output/private/vpn/SERVER/tmp/
    cp pki/ca.crt /data/BBS/output/private/vpn/SERVER/tmp/
    cp pki/issued/server.crt /data/BBS/output/private/vpn/OPENVPN/
    cp pki/ca.crt /data/BBS/output/private/vpn/OPENVPN/
    cd /data/BBS/output/private/vpn/SERVER
    cd EasyRSA-3.0.8
    echo gen-dh
    ./easyrsa gen-dh
    openvpn --genkey --secret ta.key
    cp ta.key /data/BBS/output/private/vpn/OPENVPN/
    cp pki/dh.pem /data/BBS/output/private/vpn/OPENVPN/
    
  step3.sh: |-
    #!/bin/bash
    echo ***setting up server client files***
    mkdir -p /data/BBS/output/private/vpn/CA/tmp
    mkdir -p /data/BBS/output/private/vpn/SERVER/tmp
    mkdir -p /data/BBS/output/private/vpn/CLIENT_CONFIGS/keys
    cd /data/BBS/output/private/vpn/CLIENT_CONFIGS
    chmod -R 700 ./
    cd /data/BBS/output/private/vpn/SERVER
    cd EasyRSA-3.0.8
    echo client1 | ./easyrsa gen-req client1 nopass
    cp pki/private/client1.key /data/BBS/output/private/vpn/CLIENT_CONFIGS/keys/
    cp pki/reqs/client1.req /data/BBS/output/private/vpn/CA/tmp
    cd /data/BBS/output/private/vpn/CA/EasyRSA-3.0.8
    echo import-req
    ./easyrsa import-req /data/BBS/output/private/vpn/CA/tmp/client1.req client1
    echo sign-req 
    echo yes | ./easyrsa sign-req client client1
    cp pki/issued/client1.crt /data/BBS/output/private/vpn/SERVER/tmp
    cp pki/issued/client1.crt /data/BBS/output/private/vpn/CLIENT_CONFIGS/keys
    cp /data/BBS/output/private/vpn/OPENVPN/ta.key /data/BBS/output/private/vpn/CLIENT_CONFIGS/keys/
    cp /data/BBS/output/private/vpn/OPENVPN/ca.crt /data/BBS/output/private/vpn/CLIENT_CONFIGS/keys/
    
  step4.sh: |-
    #!/bin/bash
    echo ***setting up server openvpn config files***
    cp /opt/vpn/openvpn.server.config /data/BBS/output/private/vpn/OPENVPN/server.conf
    cp /opt/vpn/openvpn.client.config /data/BBS/output/private/vpn/CLIENT_CONFIGS/keys/client1.ovpn
    zip -r /data/BBS/output/private/vpn/vpn.zip /data/BBS/output/private/vpn/CLIENT_CONFIGS/keys/
    #cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf /data/BBS/output/private/vpn/OPENVPN/client.base.conf

  step5.sh: |-
    #!/bin/bash
    echo enabling IP forwarding
    echo 1 > /proc/sys/net/ipv4/ip_forward
    cat /proc/sys/net/ipv4/ip_forward    
    iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE
    echo ***Running openvpn server***
    openvpn --cd /data/BBS/output/private/vpn/OPENVPN --config /data/BBS/output/private/vpn/OPENVPN/server.conf

  openvpn.server.config: |-
    #################################################
    # Sample OpenVPN 2.0 config file for            #
    # multi-client server.                          #
    #################################################
    port 1194
    proto tcp
    dev tun
    ca ca.crt
    cert server.crt
    key keys/server.key  # This file should be kept secret
    dh dh.pem
    server 10.8.0.0 255.255.255.0
    ifconfig-pool-persist /var/log/openvpn/ipp.txt
    push "redirect-gateway def1 bypass-dhcp"
    push "dhcp-option DNS  10.244.0.172"
    ;push "dhcp-option DOMAIN-SEARCH default.svc.cluster.local"
    ;push "dhcp-option DOMAIN-SEARCH svc.cluster.local"
    ;push "dhcp-option DOMAIN-SEARCH cluster.local" 
    client-to-client
    duplicate-cn
    keepalive 10 120
    tls-auth ta.key 0 # This file is secret
    cipher AES-256-CBC
    auth SHA256
    user nobody
    group nogroup
    persist-key
    persist-tun
    status /var/log/openvpn/openvpn-status.log
    verb 3

  openvpn.client.config: |-
    ##############################################
    # Sample client-side OpenVPN 2.0 config file #
    # for connecting to multi-client server.     #
    ##############################################
    client
    dev tun
    proto tcp
    remote 165.227.228.9 30036
    resolv-retry infinite
    nobind
    user nobody
    group nogroup
    persist-key
    persist-tun
    ca ca.crt
    cert client1.crt
    key client1.key
    remote-cert-tls server
    tls-auth ta.key 1
    cipher AES-256-CBC
    auth SHA256
    key-direction 1
    verb 3

  vars: |-
    # Easy-RSA 3 parameter settings
    # DON'T EDIT THIS SECTION
    # 
    # Easy-RSA 3.x doesn't source into the environment directly.
    # Complain if a user tries to do this:
    if [ -z "$EASYRSA_CALLER" ]; then
        echo "You appear to be sourcing an Easy-RSA 'vars' file." >&2
        echo "This is no longer necessary and is disallowed. See the section called" >&2
        echo "'How to use this file' near the top comments for more details." >&2
        return 1
    fi

    # DO YOUR EDITS BELOW THIS POINT
    set_var EASYRSA_REQ_COUNTRY	"UK"
    set_var EASYRSA_REQ_PROVINCE	"London Village"
    set_var EASYRSA_REQ_CITY	"CyberSpace"
    set_var EASYRSA_REQ_ORG	"Copyleft Certificate Co"
    set_var EASYRSA_REQ_EMAIL	"me@muhahahahhaha.co.uk"
    set_var EASYRSA_REQ_OU		"SC"
    
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: vpn-deployment
spec:
  selector:
    matchLabels:
      app: vpn
  replicas: 1 # only run 1 pod
  template:
    metadata:
      labels:
        app: vpn
    spec:
      containers:
      - name: vpn
        image: python:3.8-slim
        securityContext:
          allowPrivilegeEscalation: true
          privileged: true  
          capabilities:
            add: ["NET_ADMIN"]
        volumeMounts:
        - name: configmap-volume
          mountPath: /opt/vpn
          readOnly: true 
        - name: data-volume
          mountPath: /data 
        ports:
        - containerPort: 1194
        command: 
        - /bin/bash
        - -c
        - |
          echo VPN setup v1
          
          apt update
          echo starting install of openvpn
          DEBIAN_FRONTEND=noninteractive apt install -y openvpn wget iptables zip
          
          ##force new configs/cert/keys
          #rm -rf /data/BBS/output/private/vpn/vpn.zip
          
          #check if we already have a client ovpn file... if so skip creating new keys/ovpn 
          if [[ -f "/data/BBS/output/private/vpn/vpn.zip" ]]
          then
            echo found keys and ovpn... using saved keys/ovpn ... skipping new setup...
            apt update
            DEBIAN_FRONTEND=noninteractive apt install -y openvpn 
          else
            echo creating vpn infra for vpn...
            bash /opt/vpn/step1.sh
            
            echo setting up server files 
            bash /opt/vpn/step2.sh
            
            echo setting up server client files
            bash /opt/vpn/step3.sh
          fi
          
          echo setting up server openvpn config files
          bash /opt/vpn/step4.sh
            
          echo starting vpn server...
          bash /opt/vpn/step5.sh
          
      volumes:
      - name: configmap-volume
        configMap:
          defaultMode: 0777
          name: vpn-configmap
      - name: data-volume
        hostPath: 
          path: /mnt/volume_lon1_01
          type: Directory  
---
kind: Service
apiVersion: v1
metadata:
  name: vpn-service
spec:
  type: NodePort
  selector:
    app: vpn
  ports:
  - protocol: TCP
    port: 21194
    nodePort: 30036
    targetPort: 1194    
