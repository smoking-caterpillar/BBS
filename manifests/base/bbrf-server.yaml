apiVersion: v1
kind: ConfigMap
metadata:
  name: bbrf-configmap
data:     
  bbrf-init.sh: |-
    #!/bin/bash

    sleep 10

    COUCHDB=http://localhost:5984/
    AUTH=$COUCHDB_USER:$COUCHDB_PASSWORD

    if [ -z "$BBRF_PASSWORD" ]; then
        BBRF_PASSWORD=$(openssl rand -hex 32)
        echo "[BBRF] Created following password for user bbrf: $BBRF_PASSWORD"
    fi

    # create the _users db
    curl -X PUT $COUCHDB"_users" -u $AUTH -s > /dev/null

    # create the bbrf user
    curl -X PUT -X PUT $COUCHDB"/_users/org.couchdb.user:bbrf" -u $AUTH \
         -H "Accept: application/json" \
         -H "Content-Type: application/json" \
         -d '{"name": "bbrf", "password": "'$BBRF_PASSWORD'", "roles": [], "type": "user"}' -s > /dev/null

    # create a new database called bbf
    curl -X PUT $COUCHDB"bbrf" -u $AUTH -s > /dev/null
    
    # grant access rights to the new database
    curl -X PUT $COUCHDB"bbrf/_security" -u $AUTH -d "{\"admins\": {\"names\": [],\"roles\": []}, \"members\": {\"names\": [\"bbrf\"],\"roles\": []}}" -s > /dev/null

    # push bbrf views
    curl -X PUT $COUCHDB"bbrf/_design/bbrf" -u $AUTH -H "Content-Type: application/json" -d @/tmp/views.json -s > /dev/null

    # enable CORS
    curl -X PUT $COUCHDB"_node/_local/_config/httpd/enable_cors" -u $AUTH -d '"true"' -s > /dev/null

    # allow origin from dashboard on https://bbrf.me
    curl -X PUT $COUCHDB"_node/_local/_config/cors/origins" -u $AUTH -d '"https://bbrf.me"' -s > /dev/null
    curl -X PUT $COUCHDB"_node/_local/_config/cors/credentials" -u $AUTH -d '"true"' -s > /dev/null

    echo "[BBRF] Initialization complete"

  nginx.conf: |-
    server { 
     #listen 80;
     listen 443 ssl default_server reuseport;

     # Load the self-signed certificate files.
     ssl_certificate         /etc/nginx/keys/cert.pem;
     ssl_certificate_key     /etc/nginx/keys/privkey.pem;

     # enable gzip compression
     gzip on;
     gzip_types application/json
     gzip_min_length 1000;

     location / {
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-NginX-Proxy true;
       proxy_pass http://bbrf-service:5984;
       proxy_ssl_session_reuse off;
       proxy_set_header Host $http_host;
       proxy_cache_bypass $http_upgrade;
       proxy_redirect off;

       client_max_body_size 4g;
     }
    }
    
  nginx-create-self-signed-cert.sh: |-        
    # create a self-signed certificate for nginx reverse proxy
    # but only if it doesn't exist yet
    if [ ! -f "/etc/nginx/keys/privkey.pem" ]; then
        mkdir -p /etc/nginx/keys/
        openssl genrsa > /etc/nginx/keys/privkey.pem
        openssl req -new -x509 -key /etc/nginx/keys/privkey.pem -out /etc/nginx/keys/cert.pem -days 1095 -subj "/C=BE/ST=BBRF/L=BBRF/O=BBRF/CN=bbrf-server"
    fi
    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bbrf-listener-configmap
data:     
  domain.new.hook.sh: |-
    #!/bin/bash
    #
    # BBRF hook - save to ~/.bbrf/hooks/domain/new/resolve.sh
    # and make sure it is executable: chmod +x resolve.sh
    #
    
    domains=$@

    printf '%s\n' ${domains[@]} | dnsx -silent -a -resp | tr -d '[]' | tee \
          >(awk '{print $1":"$2}' | bbrf domain update -) \
          >(awk '{print $2":"$1}' | bbrf ip add - -p @INFER) \
          >(awk '{print $2":"$1}' | bbrf ip update -);
          
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bbrf-deployment
spec:
  selector:
    matchLabels:
      app: bbrf-server
  replicas: 1 
  template:
    metadata:
      labels:
        app: bbrf-server
    spec:
      volumes:
      - name: configmap-volume
        configMap:
          defaultMode: 0777
          name: bbrf-configmap
      containers:
      - name: bbrf-server
        image: honoki/bbrf-server
        env:
        - name: COUCHDB_USER
          value: "admin"
        - name: COUCHDB_PASSWORD
          value: "admin"
        - name: BBRF_PASSWORD
          value: "bbrfr0cks"
        volumeMounts: 
        - name: configmap-volume
          mountPath: /usr/local/bin/bbrf-init.sh
          subPath: bbrf-init.sh     
        ports:
        - containerPort: 5984
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bbrf-nginx-deployment
spec:
  selector:
    matchLabels:
      app: bbrf-server-nginx
  replicas: 1 
  template:
    metadata:
      labels:
        app: bbrf-server-nginx
    spec:
      volumes:
      - name: data-volume
        hostPath: 
          path: /mnt/volume_lon1_01
          type: Directory   
      - name: configmap-volume
        configMap:
          defaultMode: 0777
          name: bbrf-configmap
      containers:
      - name: bbrf-server-nginx
        image: nginx
        volumeMounts:
        - name: data-volume
          mountPath: /data  
        - name: configmap-volume
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: configmap-volume
          mountPath: /docker-entrypoint.d/nginx-create-self-signed-cert.sh
          subPath: nginx-create-self-signed-cert.sh
        ports:
        - containerPort: 443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bbrf-listener-deployment
spec:
  selector:
    matchLabels:
      app: bbrf-listener
  replicas: 1 
  template:
    metadata:
      labels:
        app: bbrf-listener
    spec:
      volumes:
      - name: data-volume
        hostPath: 
          path: /mnt/volume_lon1_01
          type: Directory   
      - name: configmap-volume
        configMap:
          defaultMode: 0777
          name: bbrf-listener-configmap
      containers:
      - name: bbrf-listener
        image: python:3.8-slim
        command: 
        - /bin/sh
        - -c
        - |
          echo bbrf listener v1
          pip install bbrf 
          mkdir -p /root/.bbrf/hooks/domain/new/
          cp /data/BBS/output/private/bbrs-config.json /root/.bbrf/config.json
          cp /opt/bbrf/domain.new.hook.sh /root/.bbrf/hooks/domain/new/resolve.sh
          chmod +x /root/.bbrf/hooks/domain/new/resolve.sh
          ls -la /opt/bbrf/
          
          echo running listener
          bbrf listen      
        volumeMounts:
        - name: data-volume
          mountPath: /data  
        - name: configmap-volume
          mountPath: /opt/bbrf

---
kind: Service
apiVersion: v1
metadata:
  name: bbrf-service
spec:
  selector:
    app: bbrf-server
  ports:
  - protocol: TCP
    port: 5984
    targetPort: 5984
  internalTrafficPolicy: Local
---
kind: Service
apiVersion: v1
metadata:
  name: bbrf-nginx-service
spec:
  selector:
    app: bbrf-server-nginx
  ports:
  - protocol: TCP
    port: 8090
    targetPort: 443
  internalTrafficPolicy: Local
---
